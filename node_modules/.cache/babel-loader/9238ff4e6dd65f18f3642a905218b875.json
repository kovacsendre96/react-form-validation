{"ast":null,"code":"var _jsxFileName = \"/home/kovacsendre/Asztal/Practice/react-form-validation/src/components/SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport useInput from \"../hooks/use-input\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangeHandler,\n    inputBlurHandler: nameBlurHandler,\n    reset: resetNameInput\n  } = useInput(value => value.trim() !== \"\");\n  const {\n    value: enteredEmail,\n    isValid: enteredEmailIsValid,\n    hasError: emailInputHasError,\n    valueChangeHandler: emailChangeHandler,\n    inputBlurHandler: emailBlurHandler,\n    reset: resetEmailInput\n  } = useInput(value => value.trim() !== \"\" && value.includes(\"@ .com\"));\n  const [formIsValid, setFormIsValid] = useState(false);\n  useEffect(() => {\n    if (enteredNameIsValid && enteredEmailIsValid) {\n      setFormIsValid(true);\n    } else {\n      setFormIsValid(false);\n    }\n  }, [enteredNameIsValid, enteredEmailIsValid]);\n\n  const formSubmitionHandler = e => {\n    e.preventDefault();\n\n    if (!enteredNameIsValid) {\n      return;\n    }\n\n    resetEmailInput();\n    resetNameInput();\n  };\n\n  const nameInputClasses = nameInputHasError ? \"form-control invalid\" : \"form-control\";\n  const emailInputClasses = emailInputHasError ? \"form-control invalid\" : \"form-control\";\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmitionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: enteredName,\n        onChange: nameChangeHandler,\n        onBlur: nameBlurHandler,\n        type: \"text\",\n        id: \"name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), nameInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: emailInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Your Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: enteredEmail,\n        onChange: emailChangeHandler,\n        onBlur: emailBlurHandler,\n        type: \"email\",\n        id: \"email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), emailInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Invalid Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 32\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"nsOJfSTKZbwcnisfJSAzrcULNEA=\", false, function () {\n  return [useInput, useInput];\n});\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"sources":["/home/kovacsendre/Asztal/Practice/react-form-validation/src/components/SimpleInput.js"],"names":["useEffect","useState","useInput","SimpleInput","props","value","enteredName","isValid","enteredNameIsValid","hasError","nameInputHasError","valueChangeHandler","nameChangeHandler","inputBlurHandler","nameBlurHandler","reset","resetNameInput","trim","enteredEmail","enteredEmailIsValid","emailInputHasError","emailChangeHandler","emailBlurHandler","resetEmailInput","includes","formIsValid","setFormIsValid","formSubmitionHandler","e","preventDefault","nameInputClasses","emailInputClasses"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport useInput from \"../hooks/use-input\";\n\nconst SimpleInput = (props) => {\n\n  const {\n    value:enteredName,\n    isValid:enteredNameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler:nameChangeHandler,\n    inputBlurHandler:nameBlurHandler,\n    reset:resetNameInput,\n  }= useInput(value => value.trim() !==\"\");\n\n\n  const {\n    value:enteredEmail,\n    isValid:enteredEmailIsValid,\n    hasError: emailInputHasError,\n    valueChangeHandler:emailChangeHandler,\n    inputBlurHandler:emailBlurHandler,\n    reset:resetEmailInput,\n  }= useInput(value => value.trim() !== \"\" && value.includes(\"@ .com\"));\n\n\n\n\n\n\n  const [formIsValid, setFormIsValid] = useState(false);\n\n \n\n\n\n  useEffect(() => {\n    if (enteredNameIsValid && enteredEmailIsValid) {\n      setFormIsValid(true);\n    } else {\n      setFormIsValid(false);\n    }\n  }, [enteredNameIsValid, enteredEmailIsValid]);\n\n\n\n\n\n  const formSubmitionHandler = (e) => {\n    e.preventDefault();\n\n    if (!enteredNameIsValid) {\n      return;\n    }\n    resetEmailInput();\n    resetNameInput();\n  };\n\n  const nameInputClasses = nameInputHasError\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  const emailInputClasses = emailInputHasError\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  return (\n    <form onSubmit={formSubmitionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor=\"name\">Your Name</label>\n\n        <input\n          value={enteredName}\n          onChange={nameChangeHandler}\n          onBlur={nameBlurHandler}\n          type=\"text\"\n          id=\"name\"\n        />\n        {nameInputHasError && (\n          <p className=\"error-text\">Name must not be empty.</p>\n        )}\n      </div>\n\n      <div className={emailInputClasses}>\n        <label htmlFor=\"email\">Your Email</label>\n\n        <input\n          value={enteredEmail}\n          onChange={emailChangeHandler}\n          onBlur={emailBlurHandler}\n          type=\"email\"\n          id=\"email\"\n        />\n        {emailInputHasError && <p className=\"error-text\">Invalid Email</p>}\n      </div>\n\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"]},"metadata":{},"sourceType":"module"}