{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\n\nconst useInput = validateValue => {\n  _s();\n\n  const [enteredValue, setEnteredValue] = useState(\"\");\n  const [isTouched, setIsTouched] = useState(false);\n  const valueIsValid = validateValue(enteredValue);\n  const hasError = !valueIsValid && isTouched;\n\n  const valueChangeHandler = e => {\n    setEnteredValue(e.target.value);\n  };\n\n  const inputBlurHandler = e => {\n    setIsTouched(true);\n  };\n\n  return {\n    value: enteredValue,\n    isValid: valueIsValid,\n    hasError: hasError,\n    valueChangeHandler: valueChangeHandler,\n    inputBlurHandler: inputBlurHandler\n  };\n};\n\n_s(useInput, \"qlnmfbTzj9Q0H+uTzI/AGYgwaf8=\");\n\nexport default useInput;","map":{"version":3,"sources":["/home/kovacsendre/Asztal/Practice/react-form-validation/src/hooks/use-input.js"],"names":["useState","useInput","validateValue","enteredValue","setEnteredValue","isTouched","setIsTouched","valueIsValid","hasError","valueChangeHandler","e","target","value","inputBlurHandler","isValid"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,QAAQ,GAAIC,aAAD,IAAmB;AAAA;;AAElC,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCJ,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;AAEA,QAAMO,YAAY,GAAGL,aAAa,CAACC,YAAD,CAAlC;AACA,QAAMK,QAAQ,GAAG,CAACD,YAAD,IAAiBF,SAAlC;;AAGA,QAAMI,kBAAkB,GAAIC,CAAD,IAAO;AAChCN,IAAAA,eAAe,CAACM,CAAC,CAACC,MAAF,CAASC,KAAV,CAAf;AACD,GAFD;;AAIA,QAAMC,gBAAgB,GAAIH,CAAD,IAAO;AAC9BJ,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GAFD;;AAOA,SAAO;AACLM,IAAAA,KAAK,EAAET,YADF;AAELW,IAAAA,OAAO,EAACP,YAFH;AAGLC,IAAAA,QAAQ,EAAEA,QAHL;AAILC,IAAAA,kBAAkB,EAACA,kBAJd;AAKLI,IAAAA,gBAAgB,EAACA;AALZ,GAAP;AAQD,CA5BD;;GAAMZ,Q;;AA6BN,eAAeA,QAAf","sourcesContent":["import { useState } from \"react\";\n\nconst useInput = (validateValue) => {\n\n  const [enteredValue, setEnteredValue] = useState(\"\");\n  const [isTouched, setIsTouched] = useState(false);\n\n  const valueIsValid = validateValue(enteredValue);\n  const hasError = !valueIsValid && isTouched;\n\n\n  const valueChangeHandler = (e) => {\n    setEnteredValue(e.target.value);\n  };\n\n  const inputBlurHandler = (e) => {\n    setIsTouched(true);\n  };\n\n  \n\n\n  return {\n    value: enteredValue,\n    isValid:valueIsValid,\n    hasError: hasError,\n    valueChangeHandler:valueChangeHandler,\n    inputBlurHandler:inputBlurHandler\n\n  };\n};\nexport default useInput;\n"]},"metadata":{},"sourceType":"module"}