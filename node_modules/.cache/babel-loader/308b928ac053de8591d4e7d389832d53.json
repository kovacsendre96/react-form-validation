{"ast":null,"code":"var _jsxFileName = \"/home/kovacsendre/Asztal/Practice/react-form-validation/src/components/SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const [enteredName, setEnteredName] = useState(\"\");\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  const enteredNameIsValid = entered;\n\n  const nameInputChangeHandler = e => {\n    setEnteredName(e.target.value);\n\n    if (e.target.value.trim() !== \"\") {\n      setEnteredNameIsValid(true);\n    }\n  };\n\n  const nameInputBlurHandler = () => {\n    setEnteredNameTouched(true);\n\n    if (enteredName.trim() === \"\") {\n      setEnteredNameIsValid(false);\n    }\n  };\n\n  const formSubmitionHandler = e => {\n    e.preventDefault();\n    setEnteredNameTouched(true);\n\n    if (enteredName.trim() === \"\") {\n      setEnteredNameIsValid(false);\n      return;\n    }\n\n    setEnteredNameIsValid(true);\n    setEnteredName(\"\");\n  };\n\n  const nameInputIsInvalidValid = enteredNameTouched && !enteredNameIsValid;\n  const nameInputClasses = nameInputIsInvalidValid ? \"form-control invalid\" : \"form-control\";\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmitionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: enteredName,\n        ref: nameInputRef,\n        onChange: nameInputChangeHandler,\n        onBlur: nameInputBlurHandler,\n        type: \"text\",\n        id: \"name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), nameInputIsInvalidValid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"LgiCUeBZKlto+n6NHgnrvDwlEEY=\");\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"sources":["/home/kovacsendre/Asztal/Practice/react-form-validation/src/components/SimpleInput.js"],"names":["useEffect","useState","SimpleInput","props","enteredName","setEnteredName","enteredNameTouched","setEnteredNameTouched","enteredNameIsValid","entered","nameInputChangeHandler","e","target","value","trim","setEnteredNameIsValid","nameInputBlurHandler","formSubmitionHandler","preventDefault","nameInputIsInvalidValid","nameInputClasses","nameInputRef"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAAA;;AAC7B,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCJ,QAAQ,CAAC,EAAD,CAA9C;AAEA,QAAM,CAACK,kBAAD,EAAqBC,qBAArB,IAA8CN,QAAQ,CAAC,KAAD,CAA5D;AAKA,QAAMO,kBAAkB,GAAGC,OAA3B;;AAGA,QAAMC,sBAAsB,GAAIC,CAAD,IAAO;AACpCN,IAAAA,cAAc,CAACM,CAAC,CAACC,MAAF,CAASC,KAAV,CAAd;;AAEA,QAAIF,CAAC,CAACC,MAAF,CAASC,KAAT,CAAeC,IAAf,OAA0B,EAA9B,EAAkC;AAChCC,MAAAA,qBAAqB,CAAC,IAAD,CAArB;AAED;AACF,GAPD;;AASA,QAAMC,oBAAoB,GAAG,MAAI;AAE/BT,IAAAA,qBAAqB,CAAC,IAAD,CAArB;;AAEA,QAAIH,WAAW,CAACU,IAAZ,OAAuB,EAA3B,EAA+B;AAC7BC,MAAAA,qBAAqB,CAAC,KAAD,CAArB;AAED;AAEF,GATD;;AAWA,QAAME,oBAAoB,GAAIN,CAAD,IAAO;AAClCA,IAAAA,CAAC,CAACO,cAAF;AACAX,IAAAA,qBAAqB,CAAC,IAAD,CAArB;;AACA,QAAIH,WAAW,CAACU,IAAZ,OAAuB,EAA3B,EAA+B;AAC7BC,MAAAA,qBAAqB,CAAC,KAAD,CAArB;AACA;AACD;;AACDA,IAAAA,qBAAqB,CAAC,IAAD,CAArB;AACAV,IAAAA,cAAc,CAAC,EAAD,CAAd;AACD,GATD;;AAWA,QAAMc,uBAAuB,GAAGb,kBAAkB,IAAI,CAACE,kBAAvD;AAEA,QAAMY,gBAAgB,GAAGD,uBAAuB,GAC5C,sBAD4C,GAE5C,cAFJ;AAIA,sBACE;AAAM,IAAA,QAAQ,EAAEF,oBAAhB;AAAA,4BACE;AAAK,MAAA,SAAS,EAAEG,gBAAhB;AAAA,8BACE;AAAO,QAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAGE;AACE,QAAA,KAAK,EAAEhB,WADT;AAEE,QAAA,GAAG,EAAEiB,YAFP;AAGE,QAAA,QAAQ,EAAEX,sBAHZ;AAIE,QAAA,MAAM,EAAEM,oBAJV;AAKE,QAAA,IAAI,EAAC,MALP;AAME,QAAA,EAAE,EAAC;AANL;AAAA;AAAA;AAAA;AAAA,cAHF,EAWGG,uBAAuB,iBACtB;AAAG,QAAA,SAAS,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAZJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAgBE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAhBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD,CAtED;;GAAMjB,W;;KAAAA,W;AAwEN,eAAeA,WAAf","sourcesContent":["import { useEffect, useState } from \"react\";\n\nconst SimpleInput = (props) => {\n  const [enteredName, setEnteredName] = useState(\"\");\n\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n\n\n\n\n  const enteredNameIsValid = entered;\n\n\n  const nameInputChangeHandler = (e) => {\n    setEnteredName(e.target.value);\n\n    if (e.target.value.trim() !== \"\") {\n      setEnteredNameIsValid(true);\n     \n    }\n  };\n\n  const nameInputBlurHandler = ()=>{\n\n    setEnteredNameTouched(true);\n\n    if (enteredName.trim() === \"\") {\n      setEnteredNameIsValid(false);\n      \n    }\n\n  };\n\n  const formSubmitionHandler = (e) => {\n    e.preventDefault();\n    setEnteredNameTouched(true);\n    if (enteredName.trim() === \"\") {\n      setEnteredNameIsValid(false);\n      return;\n    }\n    setEnteredNameIsValid(true);\n    setEnteredName(\"\");\n  };\n\n  const nameInputIsInvalidValid = enteredNameTouched && !enteredNameIsValid;\n\n  const nameInputClasses = nameInputIsInvalidValid\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  return (\n    <form onSubmit={formSubmitionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor=\"name\">Your Name</label>\n\n        <input\n          value={enteredName}\n          ref={nameInputRef}\n          onChange={nameInputChangeHandler}\n          onBlur={nameInputBlurHandler}\n          type=\"text\"\n          id=\"name\"\n        />\n        {nameInputIsInvalidValid && (\n          <p className=\"error-text\">Name must not be empty.</p>\n        )}\n      </div>\n      <div className=\"form-actions\">\n        <button>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"]},"metadata":{},"sourceType":"module"}