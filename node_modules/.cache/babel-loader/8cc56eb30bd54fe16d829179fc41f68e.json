{"ast":null,"code":"var _jsxFileName = \"/home/kovacsendre/Asztal/Practice/react-form-validation/src/components/SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const [enteredName, setEnteredName] = useState(\"\");\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  const [enteredEmail, setEnteredEmail] = useState(\"\");\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n  const [formIsValid, setFormIsValid] = useState(false);\n  const enteredNameIsValid = enteredName.trim() !== \"\";\n  const enteredEmailIsValid = enteredEmail.trim() !== \"\" && enteredEmail.includes('@');\n  const nameInputIsInvalid = enteredNameTouched && !enteredNameIsValid;\n  const emailInputIsInValid = enteredEmailTouched && !enteredEmailIsValid;\n  useEffect(() => {\n    if (enteredNameIsValid && enteredEmailIsValid) {\n      setFormIsValid(true);\n    } else {\n      setFormIsValid(false);\n    }\n  }, [enteredNameIsValid, enteredNameIsValid]);\n\n  const nameInputChangeHandler = e => {\n    setEnteredName(e.target.value);\n  };\n\n  const emailInputChangeHandler = e => {\n    setEnteredEmail(e.target.value);\n  };\n\n  const emailInputBlurHandler = () => {\n    setEnteredEmailTouched(true);\n  };\n\n  const nameInputBlurHandler = () => {\n    setEnteredNameTouched(true);\n  };\n\n  const formSubmitionHandler = e => {\n    e.preventDefault();\n    setEnteredNameTouched(true);\n    setEnteredEmailTouched(true);\n\n    if (!enteredNameIsValid) {\n      return;\n    }\n\n    setEnteredName(\"\");\n    setEnteredEmail(\"\");\n    setEnteredNameTouched(false);\n    setEnteredEmailTouched(false);\n  };\n\n  const nameInputClasses = nameInputIsInvalid ? \"form-control invalid\" : \"form-control\";\n  const emailInputClasses = emailInputIsInValid ? \"form-control invalid\" : \"form-control\";\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmitionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: enteredName,\n        onChange: nameInputChangeHandler,\n        onBlur: nameInputBlurHandler,\n        type: \"text\",\n        id: \"name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: emailInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: enteredEmail,\n        onChange: emailInputChangeHandler,\n        onBlur: emailInputBlurHandler,\n        type: \"email\",\n        id: \"email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), emailInputIsInValid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Email must not be empty.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"MhcnUrpgU8AkcjQoHIPHy0K2jO0=\");\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"sources":["/home/kovacsendre/Asztal/Practice/react-form-validation/src/components/SimpleInput.js"],"names":["useEffect","useState","SimpleInput","props","enteredName","setEnteredName","enteredNameTouched","setEnteredNameTouched","enteredEmail","setEnteredEmail","enteredEmailTouched","setEnteredEmailTouched","formIsValid","setFormIsValid","enteredNameIsValid","trim","enteredEmailIsValid","includes","nameInputIsInvalid","emailInputIsInValid","nameInputChangeHandler","e","target","value","emailInputChangeHandler","emailInputBlurHandler","nameInputBlurHandler","formSubmitionHandler","preventDefault","nameInputClasses","emailInputClasses"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\n\nconst SimpleInput = (props) => {\n  const [enteredName, setEnteredName] = useState(\"\");\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n\n  const[enteredEmail,setEnteredEmail]=useState(\"\");\n  const[enteredEmailTouched,setEnteredEmailTouched] = useState(false);\n\n\n  const [formIsValid,setFormIsValid] = useState(false);\n\n\n  const enteredNameIsValid = enteredName.trim()!==\"\";\n  const enteredEmailIsValid = enteredEmail.trim()!==\"\" && enteredEmail.includes('@');\n\n  const nameInputIsInvalid = enteredNameTouched && !enteredNameIsValid;\n  const emailInputIsInValid = enteredEmailTouched && !enteredEmailIsValid;\n\n\n  useEffect(()=>{\n    if(enteredNameIsValid && enteredEmailIsValid){\n      setFormIsValid(true);\n    }\n    else{\n      setFormIsValid(false)\n    }\n  },[enteredNameIsValid,enteredNameIsValid]);\n\n  const nameInputChangeHandler = (e) => {\n    setEnteredName(e.target.value);\n  };\n\nconst   emailInputChangeHandler= e =>{\n    setEnteredEmail(e.target.value);\n  }\n\n\n  const emailInputBlurHandler = () =>{\n    setEnteredEmailTouched(true);\n  };\n\n\n  const nameInputBlurHandler = ()=>{\n    setEnteredNameTouched(true);\n  };\n\n  const formSubmitionHandler = (e) => {\n    e.preventDefault();\n    setEnteredNameTouched(true);\n    setEnteredEmailTouched(true);\n\n    if (!enteredNameIsValid) {\n      return;\n    }\n\n\n    setEnteredName(\"\");\n    setEnteredEmail(\"\");\n\n    setEnteredNameTouched(false)\n    setEnteredEmailTouched(false)\n  };\n\n\n  const nameInputClasses = nameInputIsInvalid\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n    const emailInputClasses = emailInputIsInValid\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  return (\n    <form onSubmit={formSubmitionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor=\"name\">Your Name</label>\n\n        <input\n          value={enteredName}\n          onChange={nameInputChangeHandler}\n          onBlur={nameInputBlurHandler}\n          type=\"text\"\n          id=\"name\"\n        />\n        {nameInputIsInvalid && (\n          <p className=\"error-text\">Name must not be empty.</p>\n        )}\n      </div>\n\n      <div className={emailInputClasses}>\n        <label htmlFor=\"name\">Your Email</label>\n\n        <input\n          value={enteredEmail}\n          onChange={emailInputChangeHandler}\n          onBlur={emailInputBlurHandler}\n          type=\"email\"\n          id=\"email\"\n        />\n        {emailInputIsInValid && (\n          <p className=\"error-text\">Email must not be empty.</p>\n        )}\n      </div>\n\n\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"]},"metadata":{},"sourceType":"module"}